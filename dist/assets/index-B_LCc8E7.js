(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const r of i.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&a(r)}).observe(document,{childList:!0,subtree:!0});function t(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function a(n){if(n.ep)return;n.ep=!0;const i=t(n);fetch(n.href,i)}})();class h{constructor(e){this.settings=e,this.entries=[]}loadEntries(){const e=localStorage.getItem("mileageEntries");this.entries=e?JSON.parse(e):[]}saveEntries(){localStorage.setItem("mileageEntries",JSON.stringify(this.entries))}addEntry(e,t,a,n){const i={id:Date.now(),date:e,odometer:parseFloat(t),gallons:parseFloat(a),fuelCost:parseFloat(n)};if(this.entries.length>0){const r=this.entries[this.entries.length-1];i.milesDriven=i.odometer-r.odometer,i.mpg=i.milesDriven/i.gallons}else i.milesDriven=0,i.mpg=0;return this.entries.push(i),this.saveEntries(),i}getEntries(){return this.entries}getStats(){if(this.entries.length===0)return{avgMpg:0,totalMiles:0,totalCost:0};const e=this.entries.reduce((n,i)=>n+i.milesDriven,0),t=this.entries.reduce((n,i)=>n+i.gallons,0),a=this.entries.reduce((n,i)=>n+i.fuelCost,0);return{avgMpg:e/t||0,totalMiles:e,totalCost:a}}getChartData(){return this.entries.map(e=>({date:e.date,mpg:e.mpg}))}exportData(){const e=JSON.stringify(this.entries,null,2),t=new Blob([e],{type:"application/json"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a,n.download="mileage-data.json",n.click(),URL.revokeObjectURL(a)}}class p{constructor(){this.records=[],this.reminders=[]}loadRecords(){const e=localStorage.getItem("maintenanceRecords");this.records=e?JSON.parse(e):[];const t=localStorage.getItem("maintenanceReminders");this.reminders=t?JSON.parse(t):[]}saveRecords(){localStorage.setItem("maintenanceRecords",JSON.stringify(this.records)),localStorage.setItem("maintenanceReminders",JSON.stringify(this.reminders))}addRecord(e,t,a){const n={id:Date.now(),date:e,type:t,notes:a,completed:!0};return this.records.push(n),this.saveRecords(),n}addReminder(e){const t={id:Date.now(),...e,completed:!1};this.reminders.push(t),this.saveRecords()}getRecords(){return this.records.sort((e,t)=>new Date(t.date)-new Date(e.date))}getReminders(){return this.reminders.filter(e=>!e.completed).sort((e,t)=>e.type==="oil"&&t.type==="oil"&&e.mileageData&&t.mileageData?e.mileageData.nextDueMileage-t.mileageData.nextDueMileage:new Date(e.dueDate)-new Date(t.dueDate))}getDueReminders(){const e=new Date;return this.reminders.filter(t=>{const a=new Date(t.dueDate);return!t.completed&&a<=e})}completeReminder(e){const t=this.reminders.find(a=>a.id===e);if(t){if(t.completed=!0,t.interval){const a=new Date(t.dueDate);a.setDate(a.getDate()+t.interval),this.addReminder(t.type,a.toISOString().split("T")[0],t.interval)}this.saveRecords()}}deleteRecord(e){this.records=this.records.filter(t=>t.id!==e),this.saveRecords()}deleteReminder(e){this.reminders=this.reminders.filter(t=>t.id!==e),this.saveRecords()}exportData(){const e={records:this.records,reminders:this.reminders},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a,n.download="maintenance-data.json",n.click(),URL.revokeObjectURL(a)}getFormattedReminder(e){let t=`${e.type} - Due: ${new Date(e.dueDate).toLocaleDateString()}`;return e.mileageData&&(t+=` (Next due at ${e.mileageData.nextDueMileage} miles)`),t}}class y{constructor(){this.settings={distanceUnit:"miles",fuelUnit:"gallons",efficiencyGoal:30,theme:"light"}}loadSettings(){const e=localStorage.getItem("appSettings");e&&(this.settings={...this.settings,...JSON.parse(e)}),this.applyTheme()}saveSettings(){localStorage.setItem("appSettings",JSON.stringify(this.settings))}updateSettings(e){this.settings={...this.settings,...e},this.saveSettings(),this.applyTheme()}getSettings(){return this.settings}toggleTheme(){this.settings.theme=this.settings.theme==="light"?"dark":"light",this.saveSettings(),this.applyTheme()}applyTheme(){document.body.classList.remove("light-mode","dark-mode"),document.body.classList.add(`${this.settings.theme}-mode`)}convertDistance(e,t,a){return t===a?e:t==="miles"?e*1.60934:e*.621371}convertVolume(e,t,a){return t===a?e:t==="gallons"?e*3.78541:e*.264172}formatEfficiency(e){const t=this.settings.distanceUnit==="miles"?"MPG":"L/100km";return`${e.toFixed(1)} ${t}`}formatDistance(e){return`${e.toFixed(1)} ${this.settings.distanceUnit}`}formatVolume(e){return`${e.toFixed(3)} ${this.settings.fuelUnit}`}formatCost(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD"}).format(e)}}class f{constructor(e,t,a,n){this.mileageTracker=e,this.maintenanceTracker=t,this.settings=a,this.chart=n,document.getElementById("odometer").addEventListener("input",()=>{this.handleOdometerInput()})}async initializeUI(){this.showLoading();try{await this.chart.initializeChart(),this.loadSettingsForm(),this.updateMaintenanceHistory(),this.checkDueReminders()}finally{this.hideLoading()}}switchPage(e){document.querySelectorAll(".page").forEach(t=>{t.classList.remove("active")}),document.querySelectorAll(".nav-btn").forEach(t=>{t.classList.remove("active")}),document.getElementById(e).classList.add("active"),document.querySelector(`[data-page="${e}"]`).classList.add("active"),e==="dashboard"&&this.updateDashboard()}updateDashboard(){const e=this.mileageTracker.getStats();document.getElementById("avgMpg").textContent=this.settings.formatEfficiency(e.avgMpg),document.getElementById("totalMiles").textContent=this.settings.formatDistance(e.totalMiles),document.getElementById("totalCost").textContent=this.settings.formatCost(e.totalCost),this.chart.updateChart(this.mileageTracker.getChartData()),this.updateDashboardMaintenance()}handleMileageFormSubmit(){const e=document.getElementById("date").value,t=document.getElementById("odometer").value,a=document.getElementById("gallons").value,n=document.getElementById("fuelCost").value;this.mileageTracker.addEntry(e,t,a,n),this.updateDashboard(),document.getElementById("mileageForm").reset(),this.switchPage("dashboard")}handleMaintenanceFormSubmit(){const e=document.getElementById("maintenanceDate").value,t=document.getElementById("maintenanceType").value;let a=document.getElementById("maintenanceNotes").value;if(t==="oil"){const n=parseInt(document.getElementById("oilChangeMileage").value),i=parseInt(document.getElementById("nextOilChangeMileage").value),r=i-n;a=`Oil changed at ${n} miles. Next change due at ${i} miles.
${a}`,this.maintenanceTracker.addReminder("oil",e,90,{mileageInterval:r,lastMileage:n,nextDueMileage:i})}this.maintenanceTracker.addRecord(e,t,a),this.updateMaintenanceHistory(),this.updateDashboardMaintenance(),document.getElementById("maintenanceForm").reset(),document.getElementById("oilChangeMileageGroup").style.display="none",document.getElementById("nextOilChangeMileageGroup").style.display="none"}handleReminderTypeChange(){const e=document.getElementById("reminderType").value,t=document.getElementById("mileageIntervalGroup");e==="oil"?t.style.display="block":t.style.display="none"}handleReminderFormSubmit(){const e=document.getElementById("reminderType").value,t=document.getElementById("reminderDueDate").value,a=parseInt(document.getElementById("reminderInterval").value),n=this.mileageTracker.getEntries();if(n.length===0){alert("Please add a mileage entry first to set up reminders.");return}const i=n[n.length-1].odometer;if(e==="oil"){const r=parseInt(document.getElementById("mileageInterval").value),s=i+r;this.maintenanceTracker.addReminder({type:e,dueDate:t,interval:a,mileageData:{currentMileage:i,mileageInterval:r,nextDueMileage:s}}),alert(`Reminder set for oil change:
Current mileage: ${i}
Next due at: ${s} miles
Date due: ${new Date(t).toLocaleDateString()}`)}else this.maintenanceTracker.addReminder({type:e,dueDate:t,interval:a});this.updateDashboardMaintenance(),document.getElementById("reminderForm").reset(),document.getElementById("mileageIntervalGroup").style.display="none"}handleSettingsFormSubmit(){const e={distanceUnit:document.getElementById("units").value,fuelUnit:document.getElementById("fuelUnits").value,efficiencyGoal:parseFloat(document.getElementById("efficiencyGoal").value)};this.settings.updateSettings(e),this.updateDashboard(),this.switchPage("dashboard")}loadSettingsForm(){const e=this.settings.getSettings();document.getElementById("units").value=e.distanceUnit,document.getElementById("fuelUnits").value=e.fuelUnit,document.getElementById("efficiencyGoal").value=e.efficiencyGoal}updateMaintenanceHistory(){const e=this.maintenanceTracker.getRecords(),t=document.getElementById("maintenanceList");t.innerHTML="",e.forEach(a=>{const n=document.createElement("div");n.className="maintenance-record";let i="";if(a.type==="oil"&&a.notes){const s=a.notes.match(/Oil changed at (\d+) miles/);s&&(i=`<p class="record-mileage">Mileage: ${s[1]}</p>`)}n.innerHTML=`
                <div class="record-header">
                    <h3>${a.type}</h3>
                    <button class="delete-btn" data-id="${a.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                <div class="record-content">
                    <p class="record-date">Date: ${new Date(a.date).toLocaleDateString()}</p>
                    ${i}
                    ${a.notes?`<p class="record-notes">${a.notes}</p>`:""}
                </div>
            `,n.querySelector(".delete-btn").addEventListener("click",()=>{this.maintenanceTracker.deleteRecord(a.id),this.updateMaintenanceHistory()}),t.appendChild(n)})}checkDueReminders(){const e=this.mileageTracker.getEntries();if(e.length===0)return;const t=e[e.length-1].odometer,a=new Date,n=this.maintenanceTracker.getReminders(),i=[];n.forEach(r=>{const s=new Date(r.dueDate);let d=!1,c="";r.type==="oil"&&r.mileageData&&t>=r.mileageData.nextDueMileage&&(d=!0,c=`Oil change needed! Current: ${t} miles, Due at: ${r.mileageData.nextDueMileage} miles`),s<=a&&(d=!0,c=`${r.type} maintenance is due (${s.toLocaleDateString()})`),d&&i.push(c)}),i.length>0&&alert(`Maintenance Due:

`+i.join(`
`))}updateDashboardMaintenance(){const e=document.getElementById("dashboardMaintenanceList"),t=document.getElementById("dashboardReminders"),a=this.mileageTracker.getEntries(),n=a.length>0?a[a.length-1].odometer:0,i=this.maintenanceTracker.getRecords().slice(0,3);e.innerHTML=i.map(s=>`
            <div class="dashboard-maintenance-item">
                <div class="maintenance-header">
                    <span class="maintenance-type">${s.type}</span>
                    <span class="maintenance-date">${new Date(s.date).toLocaleDateString()}</span>
                </div>
                ${s.notes?`<div class="maintenance-notes">${s.notes}</div>`:""}
            </div>
        `).join("");const r=this.maintenanceTracker.getReminders().map(s=>{let d="";return s.type==="oil"&&s.mileageData&&(d=`${s.mileageData.nextDueMileage-n} miles remaining`),{...s,status:d}}).slice(0,3);t.innerHTML=r.map(s=>`
            <div class="dashboard-reminder-item">
                <div class="reminder-header">
                    <span class="reminder-type">${s.type}</span>
                    <span class="reminder-date">${new Date(s.dueDate).toLocaleDateString()}</span>
                </div>
                ${s.status?`<div class="reminder-status">${s.status}</div>`:""}
            </div>
        `).join(""),i.length===0&&(e.innerHTML='<div class="no-records">No recent maintenance records</div>'),r.length===0&&(t.innerHTML='<div class="no-records">No upcoming maintenance</div>')}toggleTheme(){this.settings.toggleTheme();const e=document.querySelector("#themeToggle i");e.className=this.settings.getSettings().theme==="light"?"fas fa-moon":"fas fa-sun"}exportData(){const e={mileage:this.mileageTracker.getEntries(),maintenance:{records:this.maintenanceTracker.getRecords(),reminders:this.maintenanceTracker.getReminders()}},t=JSON.stringify(e,null,2),a=new Blob([t],{type:"application/json"}),n=URL.createObjectURL(a),i=document.createElement("a");i.href=n,i.download="mileage-tracker-data.json",i.click(),URL.revokeObjectURL(n)}showLoading(){const e=document.createElement("div");e.className="loading-overlay",e.innerHTML=`
            <div class="loading-spinner"></div>
            <p>Loading...</p>
        `,document.body.appendChild(e)}hideLoading(){const e=document.querySelector(".loading-overlay");e&&e.remove()}handleMaintenanceTypeChange(){const e=document.getElementById("maintenanceType").value,t=document.getElementById("oilChangeMileageGroup"),a=document.getElementById("nextOilChangeMileageGroup");if(e==="oil"){t.style.display="block",a.style.display="block";const n=this.mileageTracker.getEntries();if(n.length>0){const i=n[n.length-1].odometer;document.getElementById("oilChangeMileage").value=i,document.getElementById("nextOilChangeMileage").value=i+7500}}else t.style.display="none",a.style.display="none"}handleOdometerInput(){const e=document.getElementById("odometer"),t=document.getElementById("oilChangeWarning"),a=document.getElementById("milesUntilChange"),n=parseInt(e.value),r=this.maintenanceTracker.getReminders().find(s=>s.type==="oil"&&s.mileageData&&!s.completed);if(r&&n){const s=r.mileageData.nextDueMileage-n;s<=1e3?(t.style.display="block",a.textContent=s):t.style.display="none"}}}class v{constructor(){this.chart=null}initializeChart(){const e=document.getElementById("mileageChart").getContext("2d");this.chart=new window.Chart(e,{type:"line",data:{labels:[],datasets:[{label:"Miles Per Gallon",data:[],borderColor:"#2196f3",backgroundColor:"rgba(33, 150, 243, 0.1)",borderWidth:2,fill:!0,tension:.4}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!0,position:"top"},tooltip:{mode:"index",intersect:!1}},scales:{x:{display:!0,title:{display:!0,text:"Date"}},y:{display:!0,title:{display:!0,text:"MPG"},suggestedMin:0}}}})}updateChart(e){this.chart||this.initializeChart(),this.chart.data.labels=e.map(t=>new Date(t.date).toLocaleDateString()),this.chart.data.datasets[0].data=e.map(t=>t.mpg),this.chart.update()}destroy(){this.chart&&(this.chart.destroy(),this.chart=null)}}const m=new y,g=new h(m),u=new p,D=new v,l=new f(g,u,m,D);document.addEventListener("DOMContentLoaded",async()=>{m.loadSettings(),g.loadEntries(),u.loadRecords(),await l.initializeUI(),l.updateDashboard(),l.updateMaintenanceHistory(),document.querySelector(".main-nav").addEventListener("click",o=>{o.target.classList.contains("nav-btn")&&l.switchPage(o.target.dataset.page)}),document.getElementById("mileageForm").addEventListener("submit",o=>{o.preventDefault(),l.handleMileageFormSubmit()}),document.getElementById("maintenanceForm").addEventListener("submit",o=>{o.preventDefault(),l.handleMaintenanceFormSubmit()}),document.getElementById("reminderForm").addEventListener("submit",o=>{o.preventDefault(),l.handleReminderFormSubmit()}),document.getElementById("settingsForm").addEventListener("submit",o=>{o.preventDefault(),l.handleSettingsFormSubmit()}),document.getElementById("themeToggle").addEventListener("click",()=>{l.toggleTheme()}),document.getElementById("exportData").addEventListener("click",()=>{l.exportData()})});
