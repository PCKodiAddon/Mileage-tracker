(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const a of n)if(a.type==="childList")for(const o of a.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function t(n){const a={};return n.integrity&&(a.integrity=n.integrity),n.referrerPolicy&&(a.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?a.credentials="include":n.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(n){if(n.ep)return;n.ep=!0;const a=t(n);fetch(n.href,a)}})();class m{constructor(e){this.settings=e,this.entries=[]}loadEntries(){const e=localStorage.getItem("mileageEntries");this.entries=e?JSON.parse(e):[]}saveEntries(){localStorage.setItem("mileageEntries",JSON.stringify(this.entries))}addEntry(e,t,s,n){const a={id:Date.now(),date:e,odometer:parseFloat(t),gallons:parseFloat(s),fuelCost:parseFloat(n)};if(this.entries.length>0){const o=this.entries[this.entries.length-1];a.milesDriven=a.odometer-o.odometer,a.mpg=a.milesDriven/a.gallons}else a.milesDriven=0,a.mpg=0;return this.entries.push(a),this.saveEntries(),a}getEntries(){return this.entries}getStats(){if(this.entries.length===0)return{avgMpg:0,totalMiles:0,totalCost:0};const e=this.entries.reduce((n,a)=>n+a.milesDriven,0),t=this.entries.reduce((n,a)=>n+a.gallons,0),s=this.entries.reduce((n,a)=>n+a.fuelCost,0);return{avgMpg:e/t||0,totalMiles:e,totalCost:s}}getChartData(){return this.entries.map(e=>({date:e.date,mpg:e.mpg}))}exportData(){const e=JSON.stringify(this.entries,null,2),t=new Blob([e],{type:"application/json"}),s=URL.createObjectURL(t),n=document.createElement("a");n.href=s,n.download="mileage-data.json",n.click(),URL.revokeObjectURL(s)}}class h{constructor(){this.records=[],this.reminders=[]}loadRecords(){const e=localStorage.getItem("maintenanceRecords");this.records=e?JSON.parse(e):[];const t=localStorage.getItem("maintenanceReminders");this.reminders=t?JSON.parse(t):[]}saveRecords(){localStorage.setItem("maintenanceRecords",JSON.stringify(this.records)),localStorage.setItem("maintenanceReminders",JSON.stringify(this.reminders))}addRecord(e,t,s){const n={id:Date.now(),date:e,type:t,notes:s,completed:!0};return this.records.push(n),this.saveRecords(),n}addReminder(e,t,s){const n={id:Date.now(),type:e,dueDate:t,interval:s,completed:!1};return this.reminders.push(n),this.saveRecords(),n}getRecords(){return this.records.sort((e,t)=>new Date(t.date)-new Date(e.date))}getReminders(){return this.reminders.filter(e=>!e.completed)}getDueReminders(){const e=new Date;return this.reminders.filter(t=>{const s=new Date(t.dueDate);return!t.completed&&s<=e})}completeReminder(e){const t=this.reminders.find(s=>s.id===e);if(t){if(t.completed=!0,t.interval){const s=new Date(t.dueDate);s.setDate(s.getDate()+t.interval),this.addReminder(t.type,s.toISOString().split("T")[0],t.interval)}this.saveRecords()}}deleteRecord(e){this.records=this.records.filter(t=>t.id!==e),this.saveRecords()}deleteReminder(e){this.reminders=this.reminders.filter(t=>t.id!==e),this.saveRecords()}exportData(){const e={records:this.records,reminders:this.reminders},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),s=URL.createObjectURL(t),n=document.createElement("a");n.href=s,n.download="maintenance-data.json",n.click(),URL.revokeObjectURL(s)}}class u{constructor(){this.settings={distanceUnit:"miles",fuelUnit:"gallons",efficiencyGoal:30,theme:"light"}}loadSettings(){const e=localStorage.getItem("appSettings");e&&(this.settings={...this.settings,...JSON.parse(e)}),this.applyTheme()}saveSettings(){localStorage.setItem("appSettings",JSON.stringify(this.settings))}updateSettings(e){this.settings={...this.settings,...e},this.saveSettings(),this.applyTheme()}getSettings(){return this.settings}toggleTheme(){this.settings.theme=this.settings.theme==="light"?"dark":"light",this.saveSettings(),this.applyTheme()}applyTheme(){document.body.classList.remove("light-mode","dark-mode"),document.body.classList.add(`${this.settings.theme}-mode`)}convertDistance(e,t,s){return t===s?e:t==="miles"?e*1.60934:e*.621371}convertVolume(e,t,s){return t===s?e:t==="gallons"?e*3.78541:e*.264172}formatEfficiency(e){const t=this.settings.distanceUnit==="miles"?"MPG":"L/100km";return`${e.toFixed(1)} ${t}`}formatDistance(e){return`${e.toFixed(1)} ${this.settings.distanceUnit}`}formatVolume(e){return`${e.toFixed(3)} ${this.settings.fuelUnit}`}formatCost(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD"}).format(e)}}class g{constructor(e,t,s,n){this.mileageTracker=e,this.maintenanceTracker=t,this.settings=s,this.chart=n}initializeUI(){this.chart.initializeChart(),this.loadSettingsForm(),this.updateMaintenanceHistory(),this.checkDueReminders()}switchPage(e){document.querySelectorAll(".page").forEach(t=>{t.classList.remove("active")}),document.querySelectorAll(".nav-btn").forEach(t=>{t.classList.remove("active")}),document.getElementById(e).classList.add("active"),document.querySelector(`[data-page="${e}"]`).classList.add("active"),e==="dashboard"&&this.updateDashboard()}updateDashboard(){const e=this.mileageTracker.getStats();document.getElementById("avgMpg").textContent=this.settings.formatEfficiency(e.avgMpg),document.getElementById("totalMiles").textContent=this.settings.formatDistance(e.totalMiles),document.getElementById("totalCost").textContent=this.settings.formatCost(e.totalCost),this.chart.updateChart(this.mileageTracker.getChartData()),this.updateDashboardMaintenance()}handleMileageFormSubmit(){const e=document.getElementById("date").value,t=document.getElementById("odometer").value,s=document.getElementById("gallons").value,n=document.getElementById("fuelCost").value;this.mileageTracker.addEntry(e,t,s,n),this.updateDashboard(),document.getElementById("mileageForm").reset(),this.switchPage("dashboard")}handleMaintenanceFormSubmit(){const e=document.getElementById("maintenanceDate").value,t=document.getElementById("maintenanceType").value,s=document.getElementById("maintenanceNotes").value;this.maintenanceTracker.addRecord(e,t,s),this.updateMaintenanceHistory(),document.getElementById("maintenanceForm").reset()}handleSettingsFormSubmit(){const e={distanceUnit:document.getElementById("units").value,fuelUnit:document.getElementById("fuelUnits").value,efficiencyGoal:parseFloat(document.getElementById("efficiencyGoal").value)};this.settings.updateSettings(e),this.updateDashboard(),this.switchPage("dashboard")}loadSettingsForm(){const e=this.settings.getSettings();document.getElementById("units").value=e.distanceUnit,document.getElementById("fuelUnits").value=e.fuelUnit,document.getElementById("efficiencyGoal").value=e.efficiencyGoal}updateMaintenanceHistory(){const e=this.maintenanceTracker.getRecords(),t=document.getElementById("maintenanceList");t.innerHTML="",e.forEach(s=>{const n=document.createElement("div");n.className="maintenance-record",n.innerHTML=`
                <div class="record-header">
                    <h3>${s.type}</h3>
                    <button class="delete-btn" data-id="${s.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                <div class="record-content">
                    <p class="record-date">Date: ${new Date(s.date).toLocaleDateString()}</p>
                    ${s.notes?`<p class="record-notes">Notes: ${s.notes}</p>`:""}
                </div>
            `,n.querySelector(".delete-btn").addEventListener("click",()=>{this.maintenanceTracker.deleteRecord(s.id),this.updateMaintenanceHistory()}),t.appendChild(n)})}checkDueReminders(){const e=this.maintenanceTracker.getDueReminders();if(e.length>0){const t=e.map(s=>`${s.type} maintenance is due`).join(`
`);alert(`Maintenance Reminders:
`+t)}}updateDashboardMaintenance(){const e=document.getElementById("dashboardMaintenanceList"),t=document.getElementById("dashboardReminders"),s=this.maintenanceTracker.getRecords().slice(0,3);e.innerHTML=s.map(a=>`
            <div class="dashboard-maintenance-item">
                <span class="maintenance-type">${a.type}</span>
                <span class="maintenance-date">${new Date(a.date).toLocaleDateString()}</span>
            </div>
        `).join("");const n=this.maintenanceTracker.getReminders().slice(0,3);t.innerHTML=n.map(a=>`
            <div class="dashboard-reminder-item">
                <span class="reminder-type">${a.type}</span>
                <span class="reminder-date">${new Date(a.dueDate).toLocaleDateString()}</span>
            </div>
        `).join("")}toggleTheme(){this.settings.toggleTheme();const e=document.querySelector("#themeToggle i");e.className=this.settings.getSettings().theme==="light"?"fas fa-moon":"fas fa-sun"}exportData(){this.mileageTracker.exportData(),this.maintenanceTracker.exportData()}}class p{constructor(){this.chart=null}initializeChart(){const e=document.getElementById("mileageChart").getContext("2d");this.chart=new window.Chart(e,{type:"line",data:{labels:[],datasets:[{label:"Miles Per Gallon",data:[],borderColor:"#2196f3",backgroundColor:"rgba(33, 150, 243, 0.1)",borderWidth:2,fill:!0,tension:.4}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!0,position:"top"},tooltip:{mode:"index",intersect:!1}},scales:{x:{display:!0,title:{display:!0,text:"Date"}},y:{display:!0,title:{display:!0,text:"MPG"},suggestedMin:0}}}})}updateChart(e){this.chart||this.initializeChart(),this.chart.data.labels=e.map(t=>new Date(t.date).toLocaleDateString()),this.chart.data.datasets[0].data=e.map(t=>t.mpg),this.chart.update()}destroy(){this.chart&&(this.chart.destroy(),this.chart=null)}}const c=new u,d=new m(c),l=new h,f=new p,r=new g(d,l,c,f);document.addEventListener("DOMContentLoaded",()=>{c.loadSettings(),d.loadEntries(),l.loadRecords(),r.initializeUI(),r.updateDashboard(),r.updateMaintenanceHistory(),document.querySelector(".main-nav").addEventListener("click",i=>{i.target.classList.contains("nav-btn")&&r.switchPage(i.target.dataset.page)}),document.getElementById("mileageForm").addEventListener("submit",i=>{i.preventDefault(),r.handleMileageFormSubmit()}),document.getElementById("maintenanceForm").addEventListener("submit",i=>{i.preventDefault(),r.handleMaintenanceFormSubmit()}),document.getElementById("settingsForm").addEventListener("submit",i=>{i.preventDefault(),r.handleSettingsFormSubmit()}),document.getElementById("themeToggle").addEventListener("click",()=>{r.toggleTheme()}),document.getElementById("exportData").addEventListener("click",()=>{r.exportData()})});
