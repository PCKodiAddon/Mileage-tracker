(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&a(i)}).observe(document,{childList:!0,subtree:!0});function t(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(n){if(n.ep)return;n.ep=!0;const s=t(n);fetch(n.href,s)}})();class u{constructor(e){this.settings=e,this.entries=[]}loadEntries(){const e=localStorage.getItem("mileageEntries");this.entries=e?JSON.parse(e):[]}saveEntries(){localStorage.setItem("mileageEntries",JSON.stringify(this.entries))}addEntry(e,t,a,n){const s={id:Date.now(),date:e,odometer:parseFloat(t),gallons:parseFloat(a),fuelCost:parseFloat(n)};if(this.entries.length>0){const i=this.entries[this.entries.length-1];s.milesDriven=s.odometer-i.odometer,s.mpg=s.milesDriven/s.gallons}else s.milesDriven=0,s.mpg=0;return this.entries.push(s),this.saveEntries(),s}getEntries(){return this.entries}getStats(){if(this.entries.length===0)return{avgMpg:0,totalMiles:0,totalCost:0};const e=this.entries.reduce((n,s)=>n+s.milesDriven,0),t=this.entries.reduce((n,s)=>n+s.gallons,0),a=this.entries.reduce((n,s)=>n+s.fuelCost,0);return{avgMpg:e/t||0,totalMiles:e,totalCost:a}}getChartData(){const e=this.getEntries().sort((t,a)=>new Date(t.date)-new Date(a.date));return{dates:e.map(t=>t.date),mpg:e.map(t=>{const a=this.entries[this.entries.indexOf(t)-1];return a?(t.odometer-a.odometer)/t.gallons:0})}}exportData(){const e=JSON.stringify(this.entries,null,2),t=new Blob([e],{type:"application/json"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a,n.download="mileage-data.json",n.click(),URL.revokeObjectURL(a)}}class h{constructor(e){this.settings=e,this.records=[],this.reminders=[]}loadRecords(){const e=localStorage.getItem("maintenanceRecords");this.records=e?JSON.parse(e):[];const t=localStorage.getItem("maintenanceReminders");this.reminders=t?JSON.parse(t):[]}saveRecords(){localStorage.setItem("maintenanceRecords",JSON.stringify(this.records)),localStorage.setItem("maintenanceReminders",JSON.stringify(this.reminders))}addRecord(e,t,a){const n={id:Date.now(),date:e,type:t,notes:a,completed:!0};return this.records.push(n),this.saveRecords(),n}addReminder(e,t,a,n=null){const s={id:Date.now(),type:e,dueDate:t,interval:a,mileageData:n,completed:!1};this.reminders.push(s),this.saveRecords()}getRecords(){return this.records.sort((e,t)=>new Date(t.date)-new Date(e.date))}getReminders(){return this.reminders.filter(e=>!e.completed).sort((e,t)=>e.type==="oil"&&t.type==="oil"&&e.mileageData&&t.mileageData?e.mileageData.nextDueMileage-t.mileageData.nextDueMileage:new Date(e.dueDate)-new Date(t.dueDate))}getDueReminders(){const e=new Date;return this.reminders.filter(t=>{if(t.completed)return!1;const a=new Date(t.dueDate);return t.type==="oil"&&t.mileageData&&this.settings.getCurrentMileage()>=t.mileageData.nextDueMileage||a<=e})}completeReminder(e){const t=this.reminders.find(a=>a.id===e);if(t){if(t.completed=!0,t.interval){const a=new Date(t.dueDate);a.setDate(a.getDate()+t.interval),this.addReminder(t.type,a.toISOString().split("T")[0],t.interval)}this.saveRecords()}}deleteRecord(e){this.records=this.records.filter(t=>t.id!==e),this.saveRecords()}deleteReminder(e){this.reminders=this.reminders.filter(t=>t.id!==e),this.saveRecords()}exportData(){const e={records:this.records,reminders:this.reminders},t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a,n.download="maintenance-data.json",n.click(),URL.revokeObjectURL(a)}getFormattedReminder(e){let t=`${e.type} - Due: ${new Date(e.dueDate).toLocaleDateString()}`;return e.mileageData&&(t+=` (Next due at ${e.mileageData.nextDueMileage} miles)`),t}}class p{constructor(){this.settings={distanceUnit:"miles",fuelUnit:"gallons",efficiencyGoal:25,theme:"light",currentOdometer:0,oilChangeInterval:7500}}loadSettings(){const e=localStorage.getItem("settings");e&&(this.settings={...this.settings,...JSON.parse(e)}),document.body.className=this.settings.theme==="dark"?"dark-mode":"light-mode"}saveSettings(){localStorage.setItem("settings",JSON.stringify(this.settings))}updateSettings(e){this.settings={...this.settings,...e},localStorage.setItem("settings",JSON.stringify(this.settings)),document.body.className=this.settings.theme==="dark"?"dark-mode":"light-mode"}getSettings(){return this.settings}toggleTheme(){this.settings.theme=this.settings.theme==="light"?"dark":"light",this.saveSettings(),document.body.className=this.settings.theme==="dark"?"dark-mode":"light-mode"}applyTheme(){document.body.classList.remove("light-mode","dark-mode"),document.body.classList.add(`${this.settings.theme}-mode`)}convertDistance(e,t,a){return t===a?e:t==="miles"?e*1.60934:e*.621371}convertVolume(e,t,a){return t===a?e:t==="gallons"?e*3.78541:e*.264172}formatEfficiency(e){const t=this.settings.distanceUnit==="miles"?"MPG":"L/100km";return`${e.toFixed(1)} ${t}`}formatDistance(e){return`${e.toFixed(1)} ${this.settings.distanceUnit}`}formatVolume(e){return`${e.toFixed(3)} ${this.settings.fuelUnit}`}formatCost(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD"}).format(e)}getCurrentMileage(){return this.settings.currentOdometer||0}getOilChangeInterval(){return this.settings.oilChangeInterval||7500}updateMileage(e){this.settings.currentOdometer=e,this.saveSettings()}}class f{constructor(e,t,a,n){this.mileageTracker=e,this.maintenanceTracker=t,this.settings=a,this.chart=n,document.getElementById("odometer").addEventListener("input",()=>{this.handleOdometerInput()})}async initializeUI(){this.showLoading();try{await this.chart.initializeChart(),this.loadSettingsForm(),this.updateMaintenanceHistory(),this.updateDashboard(),this.checkDueReminders()}finally{this.hideLoading()}}switchPage(e){document.querySelectorAll(".page").forEach(t=>{t.classList.remove("active")}),document.querySelectorAll(".nav-btn").forEach(t=>{t.classList.remove("active")}),document.getElementById(e).classList.add("active"),document.querySelector(`[data-page="${e}"]`).classList.add("active"),e==="dashboard"&&this.updateDashboard()}updateDashboard(){try{const e=this.mileageTracker.getStats();document.getElementById("avgMpg").textContent=this.settings.formatEfficiency(e.avgMpg||0),document.getElementById("totalMiles").textContent=this.settings.formatDistance(e.totalMiles||0),document.getElementById("totalCost").textContent=this.settings.formatCost(e.totalCost||0);const t=this.mileageTracker.getChartData();this.chart&&this.chart.updateChart(t),this.updateDashboardMaintenance()}catch(e){console.error("Error updating dashboard:",e)}}handleMileageFormSubmit(){const e=document.getElementById("date").value,t=parseFloat(document.getElementById("odometer").value),a=parseFloat(document.getElementById("gallons").value),n=parseFloat(document.getElementById("fuelCost").value);this.mileageTracker.addEntry(e,t,a,n),this.settings.updateSettings({...this.settings.getSettings(),currentOdometer:t}),this.updateDashboard(),document.getElementById("mileageForm").reset(),this.switchPage("dashboard")}handleMaintenanceFormSubmit(){const e=document.getElementById("maintenanceDate").value,t=document.getElementById("maintenanceType").value;let a=document.getElementById("maintenanceNotes").value;if(t==="oil"){const n=this.settings.getCurrentMileage(),s=this.settings.getOilChangeInterval(),i=n+s;a=`Oil changed at ${n} miles. Next change due at ${i} miles.
${a}`,this.maintenanceTracker.addReminder(t,e,90,{currentMileage:n,mileageInterval:s,nextDueMileage:i})}this.maintenanceTracker.addRecord(e,t,a),this.updateMaintenanceHistory(),this.updateDashboardMaintenance(),document.getElementById("maintenanceForm").reset()}handleReminderTypeChange(){const e=document.getElementById("reminderType").value,t=document.getElementById("mileageIntervalGroup");e==="oil"?t.style.display="block":t.style.display="none"}handleReminderFormSubmit(){const e=document.getElementById("reminderType").value,t=document.getElementById("reminderDueDate").value,a=parseInt(document.getElementById("reminderInterval").value);if(e==="oil"){const n=this.settings.getCurrentMileage(),s=this.settings.getOilChangeInterval();if(n===0){alert("Please update your current mileage in Settings first."),this.switchPage("settings");return}const i=n+s;this.maintenanceTracker.addReminder(e,t,a,{currentMileage:n,mileageInterval:s,nextDueMileage:i}),alert(`Oil Change Reminder Set:
Current Mileage: ${n}
Next Due: ${i} miles
Date Due: ${new Date(t).toLocaleDateString()}`)}else this.maintenanceTracker.addReminder(e,t,a);this.updateDashboardMaintenance(),document.getElementById("reminderForm").reset()}handleSettingsFormSubmit(){const e={distanceUnit:document.getElementById("units").value,fuelUnit:document.getElementById("fuelUnits").value,efficiencyGoal:parseFloat(document.getElementById("efficiencyGoal").value),currentOdometer:parseInt(document.getElementById("currentOdometer").value),oilChangeInterval:parseInt(document.getElementById("oilChangeInterval").value)};this.settings.updateSettings(e),this.updateDashboard(),this.switchPage("dashboard")}loadSettingsForm(){const e=this.settings.getSettings();document.getElementById("units").value=e.distanceUnit,document.getElementById("fuelUnits").value=e.fuelUnit,document.getElementById("efficiencyGoal").value=e.efficiencyGoal,document.getElementById("currentOdometer").value=e.currentOdometer,document.getElementById("oilChangeInterval").value=e.oilChangeInterval}updateMaintenanceHistory(){const e=this.maintenanceTracker.getRecords(),t=document.getElementById("maintenanceList");t.innerHTML="",e.forEach(a=>{const n=document.createElement("div");n.className="maintenance-record";let s="";if(a.type==="oil"&&a.notes){const o=a.notes.match(/Oil changed at (\d+) miles/);o&&(s=`<p class="record-mileage">Mileage: ${o[1]}</p>`)}n.innerHTML=`
                <div class="record-header">
                    <h3>${a.type}</h3>
                    <button class="delete-btn" data-id="${a.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                <div class="record-content">
                    <p class="record-date">Date: ${new Date(a.date).toLocaleDateString()}</p>
                    ${s}
                    ${a.notes?`<p class="record-notes">${a.notes}</p>`:""}
                </div>
            `,n.querySelector(".delete-btn").addEventListener("click",()=>{this.maintenanceTracker.deleteRecord(a.id),this.updateMaintenanceHistory()}),t.appendChild(n)})}checkDueReminders(){const e=this.settings.getCurrentMileage();if(e===0)return;const t=this.maintenanceTracker.getDueReminders(),a=[];t.forEach(n=>{if(n.type==="oil"&&n.mileageData){const s=n.mileageData.nextDueMileage-e;s<=0?a.push(`Oil change overdue! Current: ${e} miles
Due at: ${n.mileageData.nextDueMileage} miles`):s<=500&&a.push(`Oil change due soon! ${s} miles remaining`)}else a.push(`${n.type} maintenance is due (${new Date(n.dueDate).toLocaleDateString()})`)}),a.length>0&&alert(`Maintenance Reminders:

`+a.join(`

`))}updateDashboardMaintenance(){const e=document.getElementById("dashboardMaintenanceList"),t=document.getElementById("dashboardReminders"),a=this.settings.getCurrentMileage(),n=this.maintenanceTracker.getRecords().slice(0,3);e.innerHTML=n.length>0?n.map(i=>`
                <div class="dashboard-maintenance-item">
                    <div class="maintenance-header">
                        <span class="maintenance-type">${i.type}</span>
                        <span class="maintenance-date">${new Date(i.date).toLocaleDateString()}</span>
                    </div>
                    ${i.notes?`<div class="maintenance-notes">${i.notes}</div>`:""}
                </div>
            `).join(""):'<div class="no-records">No recent maintenance records</div>';const s=this.maintenanceTracker.getReminders().map(i=>{let o="";if(i.type==="oil"&&i.mileageData){const c=i.mileageData.nextDueMileage-a;o=c<=0?"OVERDUE!":`${c} miles remaining`}return{...i,status:o,dueDate:new Date(i.dueDate).toLocaleDateString()}}).slice(0,3);t.innerHTML=s.length>0?s.map(i=>`
                <div class="dashboard-reminder-item ${i.status==="OVERDUE!"?"overdue":""}">
                    <div class="reminder-header">
                        <span class="reminder-type">${i.type}</span>
                        <span class="reminder-date">${i.dueDate}</span>
                        <button class="delete-btn" onclick="ui.handleReminderDelete(${i.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                    ${i.status?`
                        <div class="reminder-status ${i.status==="OVERDUE!"?"overdue":""}">
                            ${i.status}
                        </div>
                    `:""}
                </div>
            `).join(""):'<div class="no-records">No upcoming maintenance</div>'}toggleTheme(){this.settings.toggleTheme();const e=document.querySelector("#themeToggle i");e.className=this.settings.getSettings().theme==="light"?"fas fa-moon":"fas fa-sun"}exportData(){const e={mileage:this.mileageTracker.getEntries(),maintenance:{records:this.maintenanceTracker.getRecords(),reminders:this.maintenanceTracker.getReminders()}},t=JSON.stringify(e,null,2),a=new Blob([t],{type:"application/json"}),n=URL.createObjectURL(a),s=document.createElement("a");s.href=n,s.download="mileage-tracker-data.json",s.click(),URL.revokeObjectURL(n)}showLoading(){const e=document.createElement("div");e.className="loading-overlay",e.innerHTML=`
            <div class="loading-spinner"></div>
            <p>Loading...</p>
        `,document.body.appendChild(e)}hideLoading(){const e=document.querySelector(".loading-overlay");e&&e.remove()}handleMaintenanceTypeChange(){}handleOdometerInput(){const e=document.getElementById("odometer"),t=document.getElementById("oilChangeWarning"),a=document.getElementById("milesUntilChange"),n=parseInt(e.value),i=this.maintenanceTracker.getReminders().find(o=>o.type==="oil"&&o.mileageData&&!o.completed);if(i&&n){const o=i.mileageData.nextDueMileage-n;o<=1e3?(t.style.display="block",a.textContent=o):t.style.display="none"}}handleReminderDelete(e){confirm("Are you sure you want to delete this reminder?")&&(this.maintenanceTracker.deleteReminder(e),this.updateDashboardMaintenance())}}class y{constructor(){this.chart=null}async initializeChart(){const e=document.getElementById("mileageChart").getContext("2d");this.chart=new window.Chart(e,{type:"line",data:{labels:[],datasets:[{label:"Miles Per Gallon",data:[],borderColor:"#2196f3",backgroundColor:"rgba(33, 150, 243, 0.1)",borderWidth:2,pointBackgroundColor:"#2196f3",pointBorderColor:"#fff",pointHoverBackgroundColor:"#fff",pointHoverBorderColor:"#2196f3",pointRadius:4,pointHoverRadius:6,fill:!0,tension:.4}]},options:{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!0,position:"top",labels:{font:{size:14,family:"'Segoe UI', sans-serif"},padding:20,usePointStyle:!0,pointStyle:"circle"}},tooltip:{backgroundColor:"rgba(255, 255, 255, 0.9)",titleColor:"#333",titleFont:{size:14,weight:"bold",family:"'Segoe UI', sans-serif"},bodyColor:"#666",bodyFont:{size:13,family:"'Segoe UI', sans-serif"},padding:12,borderColor:"#e0e0e0",borderWidth:1,displayColors:!1,callbacks:{label:function(t){return`${t.parsed.y.toFixed(1)} MPG`}}}},scales:{x:{grid:{display:!1},ticks:{font:{size:12,family:"'Segoe UI', sans-serif"},color:"#666"}},y:{beginAtZero:!0,grid:{color:"rgba(0, 0, 0, 0.05)",drawBorder:!1},ticks:{font:{size:12,family:"'Segoe UI', sans-serif"},color:"#666",padding:10,callback:function(t){return t.toFixed(1)+" MPG"}}}},interaction:{intersect:!1,mode:"index"},elements:{line:{tension:.4}}}})}updateChart(e){if(!this.chart){console.warn("Chart not initialized");return}if(!e||!e.dates||!e.mpg){this.chart.data.labels=[],this.chart.data.datasets[0].data=[],this.chart.update("none");return}const t=e.dates.map(s=>new Date(s).toLocaleDateString("en-US",{month:"short",day:"numeric"}));this.chart.data.labels=t,this.chart.data.datasets[0].data=e.mpg;const n=this.chart.ctx.createLinearGradient(0,0,0,400);n.addColorStop(0,"rgba(33, 150, 243, 0.2)"),n.addColorStop(1,"rgba(33, 150, 243, 0)"),this.chart.data.datasets[0].backgroundColor=n,this.chart.update()}destroy(){this.chart&&(this.chart.destroy(),this.chart=null)}}const d=new p,m=new u(d),g=new h(d),v=new y,l=new f(m,g,d,v);window.ui=l;document.addEventListener("DOMContentLoaded",async()=>{try{d.loadSettings(),m.loadEntries(),g.loadRecords(),await l.initializeUI(),l.updateMaintenanceHistory(),document.querySelector(".main-nav").addEventListener("click",r=>{r.target.classList.contains("nav-btn")&&l.switchPage(r.target.dataset.page)}),document.getElementById("mileageForm").addEventListener("submit",r=>{r.preventDefault(),l.handleMileageFormSubmit()}),document.getElementById("maintenanceForm").addEventListener("submit",r=>{r.preventDefault(),l.handleMaintenanceFormSubmit()}),document.getElementById("reminderForm").addEventListener("submit",r=>{r.preventDefault(),l.handleReminderFormSubmit()}),document.getElementById("settingsForm").addEventListener("submit",r=>{r.preventDefault(),l.handleSettingsFormSubmit()}),document.getElementById("themeToggle").addEventListener("click",()=>{l.toggleTheme()}),document.getElementById("exportData").addEventListener("click",()=>{l.exportData()})}catch(r){console.error("Error initializing app:",r)}});
